import torch
import torch.nn as nn

class Discriminator(nn.Module):
    """
    The Discriminator network for Super-Resolution.
    This network is a binary classifier that differentiates real high-resolution images from fake high-resolution images generated by the generator.
    """
    def __init__(self, in_channels=3):
        super(Discriminator, self).__init__()
        
        def discriminator_block(in_filters, out_filters, stride=1, batch_norm=True):
            """Returns a sequence of layers used repeatedly in the discriminator."""
            layers = [nn.Conv2d(in_filters, out_filters, kernel_size=3, stride=stride, padding=1)]
            if batch_norm:
                layers.append(nn.BatchNorm2d(out_filters))
            layers.append(nn.LeakyReLU(0.2, inplace=True))
            return nn.Sequential(*layers)
        
        self.model = nn.Sequential(
            discriminator_block(in_channels, 64, stride=1, batch_norm=False),  # First layer does not have batch norm
            discriminator_block(64, 64, stride=2),  # Downsample
            discriminator_block(64, 128, stride=1),
            discriminator_block(128, 128, stride=2),
            discriminator_block(128, 256, stride=1),
            discriminator_block(256, 256, stride=2),
            discriminator_block(256, 512, stride=1),
            discriminator_block(512, 512, stride=2),
        )
        
        self.classifier = nn.Sequential(
            nn.AdaptiveAvgPool2d((6, 6)),  # Reduce spatial dimensions
            nn.Flatten(),  # Flatten the output
            nn.Linear(512 * 6 * 6, 1024),  # Fully connected layer
            nn.LeakyReLU(0.2, inplace=True),
            nn.Linear(1024, 1),  # Single output neuron for binary classification
            nn.Sigmoid()  # Sigmoid activation to output probability
        )
    
    def forward(self, x):
        out = self.model(x)
        out = self.classifier(out)
        return out

# Test the Discriminator Model
if __name__ == "__main__":
    disc = Discriminator()
    test_input = torch.randn((1, 3, 256, 256))  # Batch size 1, 3 channels, 256x256 image
    test_output = disc(test_input)
    print(f"Input Shape: {test_input.shape}")
    print(f"Output Shape: {test_output.shape}")  # Should be (1, 1)